==16627== Memcheck, a memory error detector
==16627== Copyright (C) 2002-2013, and GNU GPL'd, by Julian Seward et al.
==16627== Using Valgrind-3.10.0 and LibVEX; rerun with -h for copyright info
==16627== Command: ./lem-in
==16627== Parent PID: 16107
==16627== 
==16627== Conditional jump or move depends on uninitialised value(s)
==16627==    at 0x404B43: ft_strlen (in /home/vagrant/lem_in/lem-in-checker/lem-in)
==16627==    by 0x403CB2: ft_strjoin (in /home/vagrant/lem_in/lem-in-checker/lem-in)
==16627==    by 0x402205: readfile (readfile.c:25)
==16627==    by 0x4023D9: lem_in_gnl (readfile.c:75)
==16627==    by 0x401049: read_ants (parse.c:153)
==16627==    by 0x403802: main (main.c:35)
==16627== 
==16627== Conditional jump or move depends on uninitialised value(s)
==16627==    at 0x403D13: ft_strjoin (in /home/vagrant/lem_in/lem-in-checker/lem-in)
==16627==    by 0x402205: readfile (readfile.c:25)
==16627==    by 0x4023D9: lem_in_gnl (readfile.c:75)
==16627==    by 0x401049: read_ants (parse.c:153)
==16627==    by 0x403802: main (main.c:35)
==16627== 
==16627== 
==16627== HEAP SUMMARY:
==16627==     in use at exit: 280 bytes in 5 blocks
==16627==   total heap usage: 163 allocs, 158 frees, 1,012,259 bytes allocated
==16627== 
==16627== 29 (16 direct, 13 indirect) bytes in 1 blocks are definitely lost in loss record 3 of 5
==16627==    at 0x4C28C20: malloc (vg_replace_malloc.c:296)
==16627==    by 0x403F31: ft_strsplit (in /home/vagrant/lem_in/lem-in-checker/lem-in)
==16627==    by 0x400BAC: read_links (parse.c:36)
==16627==    by 0x403845: main (main.c:41)
==16627== 
==16627== 48 (24 direct, 24 indirect) bytes in 1 blocks are definitely lost in loss record 4 of 5
==16627==    at 0x4C28C20: malloc (vg_replace_malloc.c:296)
==16627==    by 0x401295: add_edge (graph.c:79)
==16627==    by 0x400C3E: read_links (parse.c:39)
==16627==    by 0x403845: main (main.c:41)
==16627== 
==16627== LEAK SUMMARY:
==16627==    definitely lost: 40 bytes in 2 blocks
==16627==    indirectly lost: 37 bytes in 2 blocks
==16627==      possibly lost: 0 bytes in 0 blocks
==16627==    still reachable: 203 bytes in 1 blocks
==16627==         suppressed: 0 bytes in 0 blocks
==16627== Reachable blocks (those to which a pointer was found) are not shown.
==16627== To see them, rerun with: --leak-check=full --show-leak-kinds=all
==16627== 
==16627== For counts of detected and suppressed errors, rerun with: -v
==16627== Use --track-origins=yes to see where uninitialised values come from
==16627== ERROR SUMMARY: 4 errors from 4 contexts (suppressed: 0 from 0)
